<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.1.xsd"
	default-lazy-init="true">

	<context:property-placeholder location="classpath:properties/dev.properties" />
	
	<!-- Shiro权限过滤过滤器定义 -->
	 <!-- 
    filterChainDefinitions参数说明,注意其验证顺序是自上而下
	=================================================================================================
	anon	    org.apache.shiro.web.filter.authc.AnonymousFilter
	authc	    org.apache.shiro.web.filter.authc.FormAuthenticationFilter
	authcBasic	org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter
	perms	    org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter
	port	    org.apache.shiro.web.filter.authz.PortFilter
	rest	    org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter
	roles	    org.apache.shiro.web.filter.authz.RolesAuthorizationFilter
	ssl	        org.apache.shiro.web.filter.authz.SslFilter
	user	    org.apache.shiro.web.filter.authc.UserFilter
	=================================================================================================
    anon: 例子/admins/**=anon 没有参数，表示可以匿名使用。
	authc: 例如/admins/user/**=authc表示需要认证(登录)才能使用，没有参数
	roles： 例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，
	                并且参数之间用逗号分割，当有多个参数时，例如admins/user/**=roles["admin,guest"],
	                每个参数通过才算通过，相当于hasAllRoles()方法。
	perms： 例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，
	                例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，
	                想当于isPermitedAll()方法。
	rest：  例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,
	               其中method为post，get，delete等。
	port：  例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,
	               其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。
	authcBasic：例如/admins/user/**=authcBasic没有参数表示httpBasic认证
	ssl:  例子/admins/user/**=ssl没有参数，表示安全的url请求，协议为https
	user: 例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查
	注：anon，authcBasic，auchc，user是认证过滤器，
	perms，roles，ssl，rest，port是授权过滤器
	=================================================================================================
    --> 
	<bean name="shiroFilterChainDefinitions" class="java.lang.String">
		<constructor-arg>
			<value>
				/login=anon
				/logout=Mylogout
				/api/**=myAuthc
				<!--/swagger**=authc-->
			</value>
		</constructor-arg>
	</bean>

	<bean id="loginOut" class="com.sps.system.security.filter.LogoutFilter" />
	<bean id="myAuthc" class="com.sps.system.security.filter.MyFilter" />
	<bean id="systemAuthorizingRealm" class="com.sps.system.security.SystemAuthorizingRealm">
		<!-- 密码加密验证方式 -->  
        <property name="credentialsMatcher">
            <bean class="com.sps.system.security.matcher.HashedCredentialsMatcher">
                <!--<property name="hashAlgorithmName" value="MD5" />-->
            </bean>
        </property>
	</bean>
	
	<!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID, 
		当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg name="name" value="com.sps.session.id" />
	</bean>
	
	<!-- 自定义会话管理配置 -->
	<bean id="sessionManager" class="com.sps.system.session.SessionManager">
		<!-- 会话超时时间，单位：毫秒 -->
		<property name="globalSessionTimeout" value="${session.sessionTimeout}" />
		<!-- 定时清理失效会话, 清理用户直接关闭浏览器造成的孤立会话 -->
		<property name="sessionValidationInterval" value="${session.sessionTimeoutClean}" />
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="sessionIdCookie" ref="sessionIdCookie" />
		<property name="sessionIdCookieEnabled" value="true" />
	</bean>


	<!-- 定义Shiro安全管理配置 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="systemAuthorizingRealm" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- 安全认证过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="login.jsp" />
		<property name="successUrl" value="/swagger-ui.html"/>  
		<property name="unauthorizedUrl" value="/unauthorized"/>
		<property name="filters">
			<map>
				<entry key="Mylogout" value-ref="loginOut" />
				<entry key="myAuthc" value-ref="myAuthc" />
			</map>
		</property>
		<property name="filterChainDefinitions">
			<ref bean="shiroFilterChainDefinitions" />
		</property>
	</bean>
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 -->  
    <!--<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.Md5CredentialsMatcher"/>-->

	<!-- 支持Shiro对Controller的方法级AOP安全控制 -->
	<!-- AOP式方法级权限检查,开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->    
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
</beans>